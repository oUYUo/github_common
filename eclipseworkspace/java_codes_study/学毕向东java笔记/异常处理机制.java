/*
1，java对异常处理代码块：
		try
		{
			可能出现异常的代码
		}
		catch(异常类型 变量)	// 异常类型就两大类：Erroe（致命错误）、Excption（异常）
		{
			异常处理方式
		}
		finally
		{
			无论出不出异常，都会执行此语句。（异常出口），当函数内部出现return，该语句还是会执行的。
		}

  出现异常执行循序：
	A，终止try出现异常代码后的代码执行。
	B，跳到 catch 执行异常处理。
	C，catch执行完毕后，程序按正常指令流执行，不会终止。

  未出现异常执行循序：
    A，执行完try代码。
	B，不会执行catch里面的代码。
	C，程序按正常指令流执行，不会终止。
----------------------------------------------------------------------------------
2，异常处理基本指令信息：
	 A，JDK API 帮助文档指示：Excption 继承 Throwable
	 B，Throwable类中提供基本方法：
			getMessage()	//返回异常信息。
			toString()		//返回异常名称、异常信息
			printStackTrace()	//打印异常名称、异常信息、异常代码位置。
	 C，详细了解请看帮助文档。
-----------------------------------------------------------------------------------
3，throws Exception异常声明机制：
	A，异常声明是定义在可能出现异常的方法体的方法定义末尾。
			例：void ma()throws Exception
	B，被 throws 声明的方法在使用时，有两种解决方案：
			解决方法1：”抛“ 将在调用该异常方法的方法进行"throws异常申明"
			出现异常：出现异常后，java虚拟机会用默认处理异常机制进行处理。

			解决方法2：java提供的 try 关键字处理方式。
			出现异常：出现异常后，根据 try 关键字，程序正常运行。
	
	C，throws多异常申明：
			1，函数申明多异常用逗号隔开：void ma()throsw 异常类型,异常类型
			2，调用有异常函数时，申明了几个异常，就应该有几个“catch代码块”
			3，多异常要有对异常类型针对性的处理。如：函数申明了几个异常类型，处理也要有几个异常类型
			4，如果catch代码块中异常类型有继承关系，父类放在最下面。

-----------------------------------------------------------------------------------
4，throws Exception自定义编译异常：
	A，自定义异常类格式： class 类名 extends Exception {}  --->继承java提供的异常类。
	B，生成自定义异常对象：throw new 类名(”异常信息“);
	C，生成异常对象必须先 throws申明异常。(见注意事项第二条)
	D，子类调用Exception类方法，对其异常信息处理并打印。（E项对其详解）
	E，在java API文档异常方法中，有异常信息处理且打印，我们只需要子类调用它就可以。

-------------------------------------------------------------------------------------

5，throw RuntimeException 自定义运行异常：
	A，自定义异常格式：throw new RuntimeException("异常信息");
	B，此类型异常是在发生异常的内部进行定义的，不需要被throws申明。
	C，RuntimeException 类异常 属于是在发生异常函数的内部对其进行处理。
-------------------------------------------------------------------------------------

6，throws有可能抛出或申明的异常类，当该函数有可能出现异常，用throws对其进行异常申明。在编译时出现异常，需要调用者throws申明或进行try捕捉。
   throws用在方法声明后面,表示再抛出异常,由调用这个方法的上一级方法中的语句来处理。

   throw抛出一个异常对象，程序会在throw语句后立即终止。用在方法体内,表示抛出异常,由方法体内的语句处理。

-------------------------------------------------------------------------------------

异常在子父类覆盖中的体现：
1，子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法只能抛出父类的异常或该异常的子类。
2，如果父类方法抛出多个异常，那么子类在覆盖方法时，只能抛出父类异常的子集。（父类所拥有的任意异常）
3，如果父类或接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常。
4，如果子类方法发生异常，就必须进行try处理，绝对不能抛。

------------------------------------------------------------------------------------

注意事项：
1，throws和throw 异常抛出是出现在Exception或继承Exception的子类。也可出现在Throwable等。
2，throws对自定义异常申明，是申明自定义异常的类名，而不是Exception类名。

附：throws Exception与throw RuntimeException异常总结。
		1，throws Exception申明异常是让调用者进行处理。
		2，throw RuntimeException异常是内部对其进行处理。
		3，两类异常详细请见《java异常基本信息》第六项。
*/