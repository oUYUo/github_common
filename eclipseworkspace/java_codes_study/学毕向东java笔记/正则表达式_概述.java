/*
1，正则表达式：符合一定规则的表达式。
2，作用：用于专门操作字符串。
3，特点：用于一些特定的符号来表示一些代码操作。这样就简化书写。所以学习正则表达式，就是在学习一些特殊符号的使用。
4，好处：可以简化对字符串的复杂操作。
5，弊端：符号定义越多，正则越长，阅读性越差。
6，具体操作功能：
	1，匹配：boolean matches(String regex);用规则匹配整个字符串，只要有一处不符合规则，就匹配结束，返回false。
	2，切割：String[] split(String regex);
	3，替换：String replaceAll(regex,str);如果regex中有定义组，可以在第二参数中通过$符号获取正则表达式中的已有的组。
	4，获取：1，将规则封装成 Pattern 对象。
			 2，将规则对象与字符串关联 ---> Matcher
			 3，建立循环，判断字符串中子串是否符合规则 ---> m.fina()
			 4，获取匹配后字符串结果 ---> m.group()
			 5，获取字符串牵扯到两个类，都在 java.util.regex 包中：
				 Pattern类：将规则封装成对象。
				 Matcher类：将规则对象与字符串关联。

7，获取必须先匹配。

-------------------------------------------------------------------------------------------------------------------------

8，字符类正则表达式： 每个中括号[]代表判断一个字符，如判断多个：[...][...][...][...]
	1，[abc]  匹配单字符是否a、b、c 
	2，[^abc]  除了 a、b 或 c，其它字符都为真（取反的意思）。 
	3，[a-zA-Z]  匹配单字符是否 a-z 或 A-Z。
	4，[a-d[m-p]]  取并集
	5，[a-z&&[def]]  取交集
	6，范围内舍去  [a-z&&[^bc]]	a到z，除了b和c
	7，范围内舍去  [a-z&&[^m-p]]	a到z，除了m到p

9，预定义字符类 ：\\，因为/ 会被转义字符。
	1，.  表示任何字符。
	2，\d 表示数字：[0-9] 
	3，\D 表示非数字： [^0-9] 
	4，\s 表示空白字符：[ \t\n\x0B\f\r] 
	5，\S 表示非空白字符：[^\s] 
	6，\w 表示单词字符：[a-zA-Z_0-9] 
	7，\W 表示非单词字符：[^\w] 

10，Greedy 数量词 
	1，X?     表示 x 字符出现一次或一次也没有 
	2，X*     表示 x 字符出现零次或多次 
	3，X+     表示 x 字符出现一次或多次 
	4，X{n}   表示 x 字符恰好出现 n 次 
	5，X{n,}  表示 x 字符至少出现 n 次 
	6，X{n,m} 表示 x 字符至少 n 次，但是不超过 m 次

---------------------------------------------------------------------------------------------------------

11，思考方式：
	1，如果只想知道该字符是否对是错，使用匹配。
	2，想要将已有的字符串变成另一个字符串，替换。
	3，想要按照自定的方式将字符串变成多个字符串。切割。获取规则以外的子串。
	4，想要拿到符合需求的字符串子串，获取。获取符合规则的子串。
*/